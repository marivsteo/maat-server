// <auto-generated />
using System;
using Maat.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Maat.DataAccess.Migrations
{
    [DbContext(typeof(MaatDbContext))]
    [Migration("20210613172645_AddedSportEventUsersTable")]
    partial class AddedSportEventUsersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Maat.Domain.Models.SportEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayingNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfParticipatingPlayers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPlayersNeeded")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<int>("SportType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("SportEvents");
                });

            modelBuilder.Entity("Maat.Domain.Models.SportEventUser", b =>
                {
                    b.Property<long>("SportEventId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SportEventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SportEventUsers");
                });

            modelBuilder.Entity("Maat.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Maat.Domain.Models.SportEvent", b =>
                {
                    b.HasOne("Maat.Domain.Models.User", "CreatedBy")
                        .WithMany("SportEventsCreated")
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Maat.Domain.Models.SportEventUser", b =>
                {
                    b.HasOne("Maat.Domain.Models.SportEvent", "SportEvent")
                        .WithMany("SportEventUsers")
                        .HasForeignKey("SportEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maat.Domain.Models.User", "User")
                        .WithMany("SportEventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Maat.Domain.Models.SportEvent", b =>
                {
                    b.Navigation("SportEventUsers");
                });

            modelBuilder.Entity("Maat.Domain.Models.User", b =>
                {
                    b.Navigation("SportEventsCreated");

                    b.Navigation("SportEventUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
